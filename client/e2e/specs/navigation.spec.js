import { expect } from '@playwright/test';

import { test } from './auth.setup.js';
import { createTestUser } from '../fixtures/users.js';

test.describe('Navigation tests', () => {
    const validUser = createTestUser();
    const mockTokens = {
        accessToken: 'mock-access-token',
        refreshToken: 'mock-refresh-token'
    };

    test.beforeEach(async ({ page }) => {
        // Arrange: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        await page.route('**/api/**', route => {
            const url = route.request().url();

            if (url.includes('/api/login')) {
                return route.fulfill({
                    status: 200,
                    contentType: 'application/json',
                    body: JSON.stringify({
                        tokens: mockTokens,
                        user: { id: 1, name: validUser.fullName }
                    })
                });
            }

            if (url.includes('/api/categories/expense')) {
                return route.fulfill({
                    status: 200,
                    contentType: 'application/json',
                    body: JSON.stringify([
                        { id: 1, name: '–ü—Ä–æ–¥—É–∫—Ç—ã', icon: 'ü•ó' },
                        { id: 2, name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', icon: 'üöó' }
                    ])
                });
            }

            if (url.includes('/api/categories/income')) {
                return route.fulfill({
                    status: 200,
                    contentType: 'application/json',
                    body: JSON.stringify([
                        { id: 3, name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', icon: 'üí∞' },
                        { id: 4, name: '–§—Ä–∏–ª–∞–Ω—Å', icon: 'üíª' }
                    ])
                });
            }

            if (url.includes('/api/balance')) {
                return route.fulfill({
                    status: 200,
                    contentType: 'application/json',
                    body: JSON.stringify({ balance: 500 })
                });
            }

            // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
            return route.fulfill({
                status: 200,
                contentType: 'application/json',
                body: JSON.stringify([])
            });
        });

        // Arrange: –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
        await page.goto('/login');
        await page.fill('#email', validUser.email);
        await page.fill('#password', validUser.password);

        // Act: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
        await Promise.all([
            page.waitForResponse(res => res.url().includes('/api/login')),
            page.click('button[type="submit"]')
        ]);

        // Arrange: –∂–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await page.waitForLoadState('networkidle');
    });

    test('main navigation elements visibility', async ({ page }) => {
        // Arrange: –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        await page.waitForSelector('#navbar');

        // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await expect(page.locator('#navbar')).toBeVisible();
        await expect(page.locator('.logo-link')).toBeVisible();
        await expect(page.locator('#mainPage')).toBeVisible();
        await expect(page.locator('#transactionsPage')).toBeVisible();
        await expect(page.locator('#dropdownMenuButton1')).toBeVisible();

        // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await expect(page.locator('#balance')).toBeVisible();
        await expect(page.locator('#balance')).toHaveText('500$');
    });

    test('navigation through main menu', async ({ page }) => {
        // Arrange: –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await page.waitForSelector('#incomeChart');
        await page.waitForSelector('#expensesChart');

        // Act: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        await page.click('#transactionsPage');
        await page.waitForURL('/transactions');

        // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É –º–µ–Ω—é
        await expect(page.locator('#transactionsPage')).toHaveClass(/bg-primary/);
    });

    test('categories dropdown navigation', async ({ page }) => {
        // Act: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥—Ä–æ–ø–¥–∞—É–Ω –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ—Ö–æ–¥–∞–º
        await page.click('#dropdownMenuButton1');
        await page.click('#revenuesPage');
        await page.waitForURL('/incomes');

        // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –º–µ–Ω—é –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
        await expect(page.locator('#dropdownMenuButton1')).toHaveClass(/btn-primary/);
        await expect(page.locator('#revenuesPage')).toHaveClass(/bg-primary/);

        // Act: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥—Ä–æ–ø–¥–∞—É–Ω –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å—Ö–æ–¥–∞–º
        await page.click('#dropdownMenuButton1');
        await page.click('#costsPage');
        await page.waitForURL('/costs');

        // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –º–µ–Ω—é –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        await expect(page.locator('#dropdownMenuButton1')).toHaveClass(/btn-primary/);
        await expect(page.locator('#costsPage')).toHaveClass(/bg-primary/);
    });

    test('unauthorized access protection', async ({ page }) => {
        // Arrange: —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        const privateRoutes = ['/', '/transactions', '/costs', '/incomes'];

        // Act: –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        await page.click('button[data-bs-target="#userModal"]');
        await page.click('#logout');

        // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω
        await page.waitForURL('/login');

        // Act & Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        for (const route of privateRoutes) {
            // Act: –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
            await page.goto(route);
            // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            await page.waitForURL('/login');
        }
    });

    test('logout flow through modal', async ({ page }) => {
        // Arrange: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        await page.click('button[data-bs-target="#userModal"]');

        // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        await expect(page.locator('#userModal')).toBeVisible();

        // Act: –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥
        await page.click('#logout');
        await page.waitForURL('/login');

        // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ö–æ–¥–∞
        await expect(page.locator('#navbar')).not.toBeVisible();
    });
});


//
// –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏ —Ç–æ–≥–æ, —á—Ç–æ –º—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏:
//
//     –ù–∞–≤–∏–≥–∞—Ü–∏—è:
//
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
// –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –≥–ª–∞–≤–Ω–æ–π –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
// –†–∞–±–æ—Ç–∞ —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
//
//
//      –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
//
// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–∞–ª–∞–Ω—Å)
// –ó–∞—â–∏—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
// –ü—Ä–æ—Ü–µ—Å—Å –≤—ã—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
// –†–µ–¥–∏—Ä–µ–∫—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
//
//
//      –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
//
// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
// –†–∞–±–æ—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
